generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model admin {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String  @unique
  password     String
  role         Role    @default(Admin)
  status       String  @default("active")
  phone        String?
  profileImage String?

  // ✅ Authentication & Security
  lastLoggedIn  DateTime?
  lastLoggedOut DateTime?
  lastIp        String?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?

  // ✅ Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   String?  @db.ObjectId
  updatedBy   String?  @db.ObjectId

  // ✅ Self relations with required NoAction
  createdByAdmin admin? @relation("AdminCreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByAdmin admin? @relation("AdminUpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAdmins admin[] @relation("AdminCreatedBy")
  updatedAdmins admin[] @relation("AdminUpdatedBy")

  approvedDrivers driver[]
}


enum Role {
  Admin
  SuperAdmin
}

model user {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  phone_number      String   @unique
  email             String?  @unique
  notificationToken String?
  ratings           Float    @default(0)
  totalRides        Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  rides             rides[]  @relation("UserRides")
}

enum VehicleType {
  Auto
  Hatchback
  Sedan
  Suv
}

model driver {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Personal Info
  name         String
  email        String @unique
  phone_number String @unique
  country      String

  // Vehicle Info
  vehicle_type        VehicleType
  registration_number String      @unique
  registration_date   String
  driving_license     String
  vehicle_color       String?
  capacity            String

  // Fare Configuration
  rate       Float // Basic per-km rate (for reference or legacy use)
  baseFare   Float @default(0)
  perKmRate  Float @default(0)
  perMinRate Float @default(0)
  minFare    Float @default(0)

  // App Metadata
  notificationToken String?
  status            String  @default("inactive")
  is_approved       Boolean @default(false)

  // Approval / De-approval tracking
  lastApprovalActionById String?   @db.ObjectId
  lastApprovalActionBy   admin?    @relation(fields: [lastApprovalActionById], references: [id])
  lastApprovalActionOn   DateTime?


  // Ratings & Earnings
  ratings      Float @default(0)
  totalEarning Float @default(0)
  earnings     Float @default(0)
  totalShare   Float @default(0)
  shares       Float @default(0)

  // Ride Counts
  totalRides   Float @default(0)
  pendingRides Float @default(0)
  cancelRides  Float @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rides rides[] @relation("DriverRides")
}

model rides {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String   @db.ObjectId
  driverId                String   @db.ObjectId
  totalFare               Float
  driverEarnings          Float
  platformShare           Float
  currentLocationName     String
  destinationLocationName String
  distance                String
  status                  String
  rating                  Float?
  user                    user     @relation("UserRides", fields: [userId], references: [id])
  driver                  driver   @relation("DriverRides", fields: [driverId], references: [id])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
